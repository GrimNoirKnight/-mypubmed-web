<!--
  index.html - For MyPubMed

  Author: Alan D. Keizer
  © 2025 Alan D. Keizer. All rights reserved.

  Description:
  A browser-based frontend that fetches PubMed article data using E-Utilities (esearch & efetch),
  with fallback support for plain-text metadata parsing from a Cloudflare Worker endpoint.

  Version: 00.003.032-alpha

  Change Log:
   - Header changed to "MyPubMed" and tagline updated
   - Per-article "Show Attributes" toggle added
   - README restored with full attribute spec
-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>MyPubMed</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #FFFFFF;
      color: #3C3B6E;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #3C3B6E;
      color: #FFFFFF;
      padding: 30px 20px;
      text-align: center;
    }

    header h1 {
      margin: 0;
      font-size: 2em;
    }

    header p {
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 8px;
    }

    main {
      padding: 30px 20px;
      max-width: 900px;
      margin: auto;
    }

    input[type="text"] {
      padding: 10px;
      font-size: 16px;
      width: 60%;
      border: 2px solid #B22234;
      color: #3C3B6E;
    }

    button {
      padding: 10px 16px;
      font-size: 16px;
      background-color: #B22234;
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 10px;
    }

    button:hover {
      background-color: #8b1a25;
    }

    .save-button {
      background-color: transparent;
      border: 2px solid #B22234;
      color: #B22234;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 5px;
    }

    .save-button:hover {
      background-color: #B22234;
      color: white;
    }

    .controls {
      margin-bottom: 20px;
    }

    .result {
      margin-bottom: 30px;
      border-bottom: 1px solid #ccc;
      padding-bottom: 20px;
    }

    .label {
      font-weight: bold;
    }

    a {
      color: #B22234;
      text-decoration: underline;
    }

    #results-count {
      font-weight: bold;
      margin-bottom: 15px;
    }

    .attributes-toggle {
      margin-top: 10px;
      padding: 6px;
      background: #f9f9f9;
      border-left: 4px solid #B22234;
      display: none;
    }

    footer {
      background-color: #f1f1f1;
      padding: 20px;
      text-align: center;
      color: #3C3B6E;
      border-top: 2px solid #B22234;
      font-size: 0.95em;
    }

    footer a {
      color: #3C3B6E;
      text-decoration: none;
      font-weight: bold;
    }

    footer a:hover {
      text-decoration: underline;
    }

    #readme {
      margin-top: 40px;
      padding-top: 10px;
      border-top: 2px solid #B22234;
    }

    #debugPanel {
      white-space: pre-wrap;
      background: #f5f5f5;
      border: 1px solid #ccc;
      padding: 10px;
      font-size: 0.9em;
      color: #333;
      margin-top: 30px;
    }

    table {
      border-collapse: collapse;
      margin-top: 10px;
    }

    table, th, td {
      border: 1px solid #ccc;
      padding: 6px 10px;
    }

    th {
      background-color: #eee;
    }
  </style>
</head>
<body>

<header>
  <h1>MyPubMed</h1>
  <p>NIH Research Simplified</p>
</header>

<main>
  <div class="controls">
    <input type="text" id="searchInput" placeholder="Search PubMed..." onkeypress="if(event.key === 'Enter'){searchPubMed()}">
    <button onclick="searchPubMed()">Search</button>
    <button onclick="showSavedArticles()">View Saved Articles</button>
    <button onclick="toggleReadme()">Show README</button>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="filterStrict"> Require All Metadata
    </label>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="fallbackPlain"> Use Plain-Text Fallback
    </label>
  </div>

  <div id="results-count"></div>
  <div id="results">Ready.</div>
  <div id="debugPanel"><strong>Debug Log:</strong><br><pre>(standby... initializing)</pre></div>

  <div id="readme" style="display:none;">
    <h2>README: Attribute Reference Table</h2>
    <table>
      <thead>
        <tr>
          <th>Attribute Name</th><th>Type</th><th>Optional</th><th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr><td>pmid</td><td>String</td><td>No</td><td>PubMed ID</td></tr>
        <tr><td>title</td><td>String</td><td>No</td><td>Article Title</td></tr>
        <tr><td>abstract</td><td>String</td><td>Yes</td><td>Abstract content</td></tr>
        <tr><td>affiliations</td><td>String</td><td>Yes</td><td>Author affiliations</td></tr>
        <tr><td>authors</td><td>String</td><td>No</td><td>Author list</td></tr>
        <tr><td>conflictOfInterest</td><td>String</td><td>Yes</td><td>COI disclosures</td></tr>
        <tr><td>dateSaved</td><td>Date</td><td>Yes</td><td>Save timestamp</td></tr>
        <tr><td>doi</td><td>String</td><td>Yes</td><td>Digital Object ID</td></tr>
        <tr><td>fullTextAvailable</td><td>Boolean</td><td>Yes</td><td>PMC open access?</td></tr>
        <tr><td>funding</td><td>String</td><td>Yes</td><td>Funding sources</td></tr>
        <tr><td>issue</td><td>String</td><td>Yes</td><td>Issue number</td></tr>
        <tr><td>journal</td><td>String</td><td>No</td><td>Journal name</td></tr>
        <tr><td>keywords</td><td>String</td><td>Yes</td><td>Publisher keywords</td></tr>
        <tr><td>meSHterms</td><td>String</td><td>Yes</td><td>Medical subject headings</td></tr>
        <tr><td>pages</td><td>String</td><td>Yes</td><td>Page range</td></tr>
        <tr><td>pmcid</td><td>String</td><td>Yes</td><td>PubMed Central ID</td></tr>
        <tr><td>pubDate</td><td>Date</td><td>No</td><td>Publication date</td></tr>
        <tr><td>volume</td><td>String</td><td>Yes</td><td>Volume number</td></tr>
        <tr><td>webLink</td><td>String</td><td>Yes</td><td>PubMed URL</td></tr>
      </tbody>
    </table>
  </div>
</main>

<footer>
  &copy; 2025 MyPubMed <strong id="versionTag">v00.003.032-alpha</strong> — Powered by Cats | Created by Clean Kitty Development
</footer>

<script src="main.js"></script>
</body>
</html>




/**
 * main.js — Core Logic for MyPubMed
 *
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * Handles all PubMed API interactions, article parsing, metadata scoring,
 * localStorage caching, and UI interactivity. Includes support for
 * Cloudflare fallback proxy when direct fetch is blocked.
 *
 * Version: 00.003.032-alpha
 *
 * Change Log:
 *  - Added full metadata rendering (PMID, DOI, etc.)
 *  - Added Show Attributes toggle for each article
 *  - Fixed fallback rendering for better readability
 *  - Fixed Save/View/Remove Article functions
 *  - Improved debug output
 */

(() => {
  const VERSION = '00.003.032-alpha';

  document.addEventListener("DOMContentLoaded", () => {
    const tag = document.getElementById("versionTag");
    if (tag) tag.textContent = `v${VERSION}`;
  });

  async function searchPubMed() {
    const query = document.getElementById("searchInput").value.trim();
    const requireAll = document.getElementById("filterStrict")?.checked;
    const useFallback = document.getElementById("fallbackPlain")?.checked;

    logDebug(`> Searching PubMed for: ${query}`);
    if (!query) return;

    try {
      const esearchURL = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=${encodeURIComponent(query)}&retmode=json&retmax=40`;
      const searchRes = await fetch(esearchURL).then(r => r.json());
      const idList = searchRes.esearchresult.idlist;

      logDebug(`> Found ${idList.length} IDs`);
      const results = [];

      for (const pmid of idList) {
        try {
          let data;
          if (useFallback) {
            const proxyURL = `https://steep-wind-e765.mymsfzkxqq.workers.dev/?pmid=${pmid}`;
            data = await fetch(proxyURL).then(r => r.text());
            data = { pmid, abstract: data, fallback: true };
            logDebug(`> Fetching: ${pmid} (fallback)`);
          } else {
            const efetchURL = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`;
            const xml = await fetch(efetchURL).then(r => r.text());
            data = parseXMLMetadata(xml);
            logDebug(`> Fetching: ${pmid} (xml)`);
          }

          if (data) {
            const score = scoreMetadata(data);
            if (!requireAll || score === 5) results.push({ ...data, score });
          }
        } catch (e) {
          logDebug(`> Error fetching ${pmid}: ${e.message}`);
        }
      }

      displayResults(results);
    } catch (e) {
      logDebug(`[ERROR] ${e.message}`);
    }
  }

  function parseXMLMetadata(xml) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(xml, "text/xml");

    const getText = (tag) => doc.querySelector(tag)?.textContent || "";

    const pmid = getText("PMID");
    const title = getText("ArticleTitle");
    const authors = Array.from(doc.querySelectorAll("Author"))
      .map(a => `${a.querySelector("ForeName")?.textContent || ""} ${a.querySelector("LastName")?.textContent || ""}`)
      .join(", ");
    const journal = getText("Journal > Title");
    const pubDate = getText("PubDate") || "";
    const abstract = getText("Abstract > AbstractText");

    return { pmid, title, authors, journal, pubDate, abstract };
  }

  function scoreMetadata(article) {
    const required = ['pmid', 'title', 'authors', 'journal', 'pubDate'];
    const missing = required.filter(k => !article[k]);
    return 5 - missing.length;
  }

  function displayResults(articles) {
    const container = document.getElementById("results");
    const count = document.getElementById("results-count");

    count.textContent = `Articles Found: ${articles.length}`;
    container.innerHTML = "";

    if (articles.length === 0) {
      container.innerHTML = `<p>No articles matched.</p>`;
      return;
    }

    for (const article of articles) {
      const div = document.createElement("div");
      div.className = "result";

      const link = `https://pubmed.ncbi.nlm.nih.gov/${article.pmid}/`;

      let metadataBlock = `
        <p class="label">Title:</p><p>${article.title || "(Unavailable)"}</p>
        <p class="label">Authors:</p><p>${article.authors || "(Unavailable)"}</p>
        <p class="label">PMID:</p><p>${article.pmid || "(Unavailable)"}</p>
        <p class="label">Abstract:</p><p>${article.abstract || "No abstract available."}</p>
        <p class="label">Journal:</p><p>${article.journal || "(Unavailable)"}</p>
        <p class="label">PubDate:</p><p>${article.pubDate || "(Unavailable)"}</p>
        <p class="label">Metadata Score:</p><p>${article.score}/5</p>
        <p><a href="${link}" target="_blank">View on PubMed</a></p>
        <button class="save-button" onclick="saveArticle('${article.pmid}')">Save Article</button>
        <button class="save-button" onclick="toggleAttributes('${article.pmid}')">Show Attributes</button>
        <div id="attributes-${article.pmid}" class="attributes-toggle">
          <pre>${JSON.stringify(article, null, 2)}</pre>
        </div>
      `;

      div.innerHTML = metadataBlock;
      container.appendChild(div);
    }
  }

  function toggleAttributes(pmid) {
    const el = document.getElementById(`attributes-${pmid}`);
    if (el) el.style.display = el.style.display === "block" ? "none" : "block";
  }

  function logDebug(msg) {
    const panel = document.getElementById("debugPanel").querySelector("pre");
    panel.textContent += `\n${msg}`;
  }

  window.searchPubMed = searchPubMed;

  window.toggleReadme = () => {
    const r = document.getElementById("readme");
    r.style.display = r.style.display === "none" ? "block" : "none";
  };

  window.showSavedArticles = () => {
    const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
    displayResults(saved);
    logDebug(`> Loading saved articles (${saved.length})`);
  };

  window.saveArticle = async (pmid) => {
    try {
      const efetchURL = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`;
      const xml = await fetch(efetchURL).then(r => r.text());
      const article = parseXMLMetadata(xml);
      const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
      const exists = saved.find(a => a.pmid === pmid);
      if (!exists) {
        saved.push(article);
        localStorage.setItem("savedArticles", JSON.stringify(saved));
        logDebug(`> Saved article ${pmid}`);
      } else {
        logDebug(`> Article ${pmid} already saved`);
      }
    } catch (e) {
      logDebug(`[ERROR] Could not save article ${pmid}: ${e.message}`);
    }
  };
})();






/**
 * fallback-worker.js - For MyPubMed
 * 
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * This Cloudflare Worker acts as a proxy fallback to bypass browser CORS
 * restrictions when accessing raw PubMed metadata using the /?format=pubmed endpoint.
 *
 * Version: 00.003.032-alpha
 *
 * Change Log:
 *  - Cleaned response headers to support JSON + text fallback
 *  - Improved error response formatting
 */

export default {
  async fetch(request) {
    const url = new URL(request.url);
    const pmid = url.searchParams.get('pmid');

    if (!pmid) {
      return new Response("Error: Missing PMID parameter", { status: 400 });
    }

    const targetUrl = `https://pubmed.ncbi.nlm.nih.gov/${pmid}/?format=pubmed`;

    try {
      const response = await fetch(targetUrl, {
        headers: {
          "User-Agent": "MyPubMedWorker/1.0",
          "Accept": "text/plain"
        }
      });

      const text = await response.text();

      return new Response(text, {
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain; charset=utf-8",
          "Cache-Control": "public, max-age=1800"
        }
      });

    } catch (err) {
      return new Response(`Error fetching fallback metadata: ${err.message}`, {
        status: 502,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain"
        }
      });
    }
  }
};