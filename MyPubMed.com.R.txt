<!--
  index.html - For MyPubMed.com

  Author: Alan D. Keizer
  © 2025 Alan D. Keizer. All rights reserved.

  Description:
  A browser-based frontend that fetches PubMed article data using E-Utilities (esearch & efetch),
  with fallback support for plain-text metadata parsing from a Cloudflare Worker endpoint.

  Version: 00.003.029-alpha

  Change Log:
   - Updated to MyPubMed.com in branding and footer
   - Bumped version number to v00.003.029-alpha
   - Added dynamic versionTag span to footer
-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>MyPubMed.com</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #FFFFFF;
      color: #3C3B6E;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #3C3B6E;
      color: #FFFFFF;
      padding: 30px 20px;
      text-align: center;
    }

    header h1 {
      margin: 0;
      font-size: 2em;
    }

    header p {
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 8px;
    }

    main {
      padding: 30px 20px;
      max-width: 900px;
      margin: auto;
    }

    input[type="text"] {
      padding: 10px;
      font-size: 16px;
      width: 60%;
      border: 2px solid #B22234;
      color: #3C3B6E;
    }

    button {
      padding: 10px 16px;
      font-size: 16px;
      background-color: #B22234;
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 10px;
    }

    button:hover {
      background-color: #8b1a25;
    }

    .save-button {
      background-color: transparent;
      border: 2px solid #B22234;
      color: #B22234;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 5px;
    }

    .save-button:hover {
      background-color: #B22234;
      color: white;
    }

    .controls {
      margin-bottom: 20px;
    }

    .result {
      margin-bottom: 30px;
      border-bottom: 1px solid #ccc;
      padding-bottom: 20px;
    }

    .label {
      font-weight: bold;
    }

    a {
      color: #B22234;
      text-decoration: underline;
    }

    #results-count {
      font-weight: bold;
      margin-bottom: 15px;
    }

    footer {
      background-color: #f1f1f1;
      padding: 20px;
      text-align: center;
      color: #3C3B6E;
      border-top: 2px solid #B22234;
      font-size: 0.95em;
    }

    footer a {
      color: #3C3B6E;
      text-decoration: none;
      font-weight: bold;
    }

    footer a:hover {
      text-decoration: underline;
    }

    #readme {
      margin-top: 40px;
      padding-top: 10px;
      border-top: 2px solid #B22234;
    }

    #debugPanel {
      white-space: pre-wrap;
      background: #f5f5f5;
      border: 1px solid #ccc;
      padding: 10px;
      font-size: 0.9em;
      color: #333;
      margin-top: 30px;
    }

    table {
      border-collapse: collapse;
      margin-top: 10px;
    }

    table, th, td {
      border: 1px solid #ccc;
      padding: 6px 10px;
    }

    th {
      background-color: #eee;
    }
  </style>
</head>
<body>

<header>
  <h1>MyPubMed.com</h1>
  <p>Your fast, AI-ready tool for exploring medical research!</p>
</header>

<main>
  <div class="controls">
    <input type="text" id="searchInput" placeholder="Search PubMed...">
    <button onclick="searchPubMed()">Search</button>
    <button onclick="showSavedArticles()">View Saved Articles</button>
    <button onclick="toggleReadme()">Show README</button>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="filterStrict"> Require All Metadata
    </label>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="fallbackPlain"> Use Plain-Text Fallback
    </label>
  </div>

  <div id="results-count"></div>
  <div id="results">Ready.</div>
  <div id="debugPanel"><strong>Debug Log:</strong><br><pre>(standby... initializing)</pre></div>

  <div id="readme" style="display:none;">
    <h2>README: Attribute Reference Table</h2>
    <table>
      <thead>
        <tr>
          <th>Attribute Name</th><th>Type</th><th>Optional</th><th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr><td>pmid</td><td>String</td><td>No</td><td>PubMed ID</td></tr>
        <tr><td>title</td><td>String</td><td>No</td><td>Article Title</td></tr>
        <tr><td>authors</td><td>String</td><td>No</td><td>Author list</td></tr>
        <tr><td>journal</td><td>String</td><td>No</td><td>Journal name</td></tr>
        <tr><td>pubDate</td><td>Date</td><td>No</td><td>Publication date</td></tr>
        <tr><td>abstract</td><td>String</td><td>Yes</td><td>Abstract content</td></tr>
        <tr><td>affiliations</td><td>String</td><td>Yes</td><td>Author affiliations</td></tr>
        <tr><td>conflictOfInterest</td><td>String</td><td>Yes</td><td>COI disclosures</td></tr>
        <tr><td>dateSaved</td><td>Date</td><td>Yes</td><td>Save timestamp</td></tr>
        <tr><td>doi</td><td>String</td><td>Yes</td><td>Digital Object ID</td></tr>
        <tr><td>fullTextAvailable</td><td>Boolean</td><td>Yes</td><td>PMC open access?</td></tr>
        <tr><td>funding</td><td>String</td><td>Yes</td><td>Funding sources</td></tr>
        <tr><td>issue</td><td>String</td><td>Yes</td><td>Issue number</td></tr>
        <tr><td>keywords</td><td>String</td><td>Yes</td><td>Publisher keywords</td></tr>
        <tr><td>meSHterms</td><td>String</td><td>Yes</td><td>Medical subject headings</td></tr>
        <tr><td>pages</td><td>String</td><td>Yes</td><td>Page range</td></tr>
        <tr><td>pmcid</td><td>String</td><td>Yes</td><td>PubMed Central ID</td></tr>
        <tr><td>volume</td><td>String</td><td>Yes</td><td>Volume number</td></tr>
        <tr><td>webLink</td><td>String</td><td>Yes</td><td>PubMed URL</td></tr>
      </tbody>
    </table>
  </div>
</main>

<footer>
  &copy; 2025 MyPubMed.com <strong id="versionTag">v00.003.029-alpha</strong> — Powered by Cats | Created by Clean Kitty Development
</footer>

<script src="main.js" onerror="document.getElementById('debugPanel').innerHTML += '\n[ERROR] main.js failed to load. Check file path or hosting config.';"></script>
</body>
</html>



/**
 * main.js — Core Logic for MyPubMed.com
 * 
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * Handles all PubMed API interactions, article parsing, metadata scoring,
 * localStorage caching, and UI interactivity. Includes support for
 * Cloudflare fallback proxy when direct fetch is blocked.
 *
 * Version: 00.003.030-alpha
 *
 * Change Log:
 *  - 2025-04-03: Patch for fallback-mode rendering (was displaying undefined/0)
 *  - 2025-04-03: Footer versionTag ID added to update version number dynamically
 */


(() => {
  const VERSION = '00.003.030-alpha';

  document.addEventListener("DOMContentLoaded", () => {
    const tag = document.getElementById("versionTag");
    if (tag) tag.textContent = `v${VERSION}`;
  });

  async function searchPubMed() {
    const query = document.getElementById("searchInput").value.trim();
    const requireAll = document.getElementById("filterStrict")?.checked;
    const useFallback = document.getElementById("fallbackPlain")?.checked;
    if (!query) return;

    logDebug(`> Searching PubMed for: ${query}`);

    const results = [];
    try {
      const res = await fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term=${encodeURIComponent(query)}&retmode=json&retmax=40`);
      const json = await res.json();
      const ids = json.esearchresult.idlist;
      logDebug(`> Found ${ids.length} IDs`);

      for (const pmid of ids) {
        try {
          let article = useFallback
            ? await fetchFallback(pmid)
            : await fetchAndParseXML(pmid);
          if (!article) continue;

          article.score = scoreMetadata(article);
          if (!requireAll || article.score === 5) results.push(article);
        } catch (err) {
          logDebug(`> Error fetching ${pmid}: ${err.message}`);
        }
      }

      displayResults(results);
    } catch (err) {
      logDebug(`[ERROR] ${err.message}`);
    }
  }

  async function fetchAndParseXML(pmid) {
    const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`;
    const xml = await fetch(url).then(r => r.text());
    return parseXML(xml);
  }

  async function fetchFallback(pmid) {
    const url = `https://steep-wind-e765.mymsfzkxqq.workers.dev/?pmid=${pmid}`;
    const txt = await fetch(url).then(r => r.text());

    const title = txt.match(/^TI\s+-\s+(.*)$/m)?.[1];
    const journal = txt.match(/^JT\s+-\s+(.*)$/m)?.[1];
    const date = txt.match(/^DP\s+-\s+(.*)$/m)?.[1];
    const pmidMatch = txt.match(/^PMID-\s+(.*)$/m);
    const authors = (txt.match(/^FAU\s+-\s+(.*)$/gm) || []).map(line => line.replace("FAU - ", "")).join(", ");

    return {
      pmid: pmidMatch?.[1],
      title,
      journal,
      pubDate: date,
      authors,
    };
  }

  function parseXML(xml) {
    const doc = new DOMParser().parseFromString(xml, "text/xml");
    const get = (selector) => doc.querySelector(selector)?.textContent || "";
    const authors = Array.from(doc.querySelectorAll("Author")).map(a => {
      const f = a.querySelector("ForeName")?.textContent || "";
      const l = a.querySelector("LastName")?.textContent || "";
      return `${f} ${l}`.trim();
    }).join(", ");
    return {
      pmid: get("PMID"),
      title: get("ArticleTitle"),
      authors,
      journal: get("Journal > Title"),
      pubDate: get("PubDate"),
    };
  }

  function scoreMetadata(article) {
    const fields = ['pmid', 'title', 'authors', 'journal', 'pubDate'];
    return fields.reduce((s, k) => s + (article[k] ? 1 : 0), 0);
  }

  function displayResults(results) {
    const out = document.getElementById("results");
    const count = document.getElementById("results-count");
    count.textContent = `Articles Found: ${results.length}`;
    out.innerHTML = "";

    for (const a of results) {
      const div = document.createElement("div");
      div.className = "result";
      div.innerHTML = `
        <p class="label">Title:</p><p>${a.title || "—"}</p>
        <p class="label">Authors:</p><p>${a.authors || "—"}</p>
        <p class="label">Journal:</p><p>${a.journal || "—"} (${a.pubDate || "—"})</p>
        <p class="label">Metadata Score:</p><p>${a.score}/5</p>
        <p><a href="https://pubmed.ncbi.nlm.nih.gov/${a.pmid}" target="_blank">View on PubMed</a></p>
        <button class="save-button" onclick="saveArticle('${a.pmid}')">Save Article</button>
      `;
      out.appendChild(div);
    }

    if (results.length === 0) {
      out.innerHTML = "<p>No articles matched.</p>";
    }
  }

  function logDebug(msg) {
    const box = document.getElementById("debugPanel").querySelector("pre");
    box.textContent += `\n${msg}`;
  }

  window.searchPubMed = searchPubMed;
  window.toggleReadme = () => {
    const r = document.getElementById("readme");
    r.style.display = r.style.display === "none" ? "block" : "none";
  };
  window.showSavedArticles = () => {
    const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
    displayResults(saved);
    logDebug(`> Showing ${saved.length} saved articles`);
  };
  window.saveArticle = async (pmid) => {
    const xml = await fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`).then(r => r.text());
    const article = parseXML(xml);
    const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
    saved.push(article);
    localStorage.setItem("savedArticles", JSON.stringify(saved));
    logDebug(`> Saved article ${pmid}`);
  };
})();




/*
  fallback-worker.js
  MyPubMed.com
  
  Author: Alan D. Keizer
  © 2025 Alan D. Keizer. All rights reserved.

  Description:
  This Cloudflare Worker serves as a proxy fallback to bypass browser CORS
  restrictions when accessing raw PubMed metadata using the `/?format=pubmed` endpoint.
  The client can request this endpoint with a `?pmid=` parameter, and the worker
  will fetch the metadata from `https://pubmed.ncbi.nlm.nih.gov/PMID/?format=pubmed`.
  
  Version: 00.003.029-alpha
  
  Change Log:
  - Initial deployment of plain-text metadata proxy
  - Adds required CORS headers for browser access
  - Error handling for missing PMIDs and fetch failures
*/

export default {
  async fetch(request) {
    const url = new URL(request.url);
    const pmid = url.searchParams.get("pmid");

    if (!pmid) {
      return new Response("Missing PMID", {
        status: 400,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain"
        }
      });
    }

    const target = `https://pubmed.ncbi.nlm.nih.gov/${pmid}/?format=pubmed`;

    try {
      const response = await fetch(target, {
        headers: {
          "User-Agent": "Mozilla/5.0",
          "Accept": "text/plain"
        }
      });

      const body = await response.text();

      return new Response(body, {
        status: 200,
        headers: {
          "Content-Type": "text/plain",
          "Access-Control-Allow-Origin": "*"
        }
      });

    } catch (err) {
      return new Response("Fetch failed: " + err.message, {
        status: 502,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain"
        }
      });
    }
  }
}