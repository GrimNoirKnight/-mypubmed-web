<!--
  index.html - For MyPubMed

  Author: Alan D. Keizer
  © 2025 Alan D. Keizer. All rights reserved.

  Description:
  A browser-based frontend that fetches PubMed article data using E-Utilities (esearch & efetch),
  with fallback support for plain-text metadata parsing from a Cloudflare Worker endpoint.

  Version: 00.003.033-alpha

  Change Log:
   - Fixed broken search and button functionality
   - README and Save Article now functional again
   - Added mutual exclusivity to checkboxes
-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>MyPubMed</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #FFFFFF;
      color: #3C3B6E;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #3C3B6E;
      color: #FFFFFF;
      padding: 30px 20px;
      text-align: center;
    }

    header h1 {
      margin: 0;
      font-size: 2em;
    }

    header p {
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 8px;
    }

    main {
      padding: 30px 20px;
      max-width: 900px;
      margin: auto;
    }

    input[type="text"] {
      padding: 10px;
      font-size: 16px;
      width: 60%;
      border: 2px solid #B22234;
      color: #3C3B6E;
    }

    button {
      padding: 10px 16px;
      font-size: 16px;
      background-color: #B22234;
      color: white;
      border: none;
      cursor: pointer;
      margin-left: 10px;
    }

    button:hover {
      background-color: #8b1a25;
    }

    .save-button {
      background-color: transparent;
      border: 2px solid #B22234;
      color: #B22234;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 5px;
    }

    .save-button:hover {
      background-color: #B22234;
      color: white;
    }

    .controls {
      margin-bottom: 20px;
    }

    .result {
      margin-bottom: 30px;
      border-bottom: 1px solid #ccc;
      padding-bottom: 20px;
    }

    .label {
      font-weight: bold;
    }

    a {
      color: #B22234;
      text-decoration: underline;
    }

    #results-count {
      font-weight: bold;
      margin-bottom: 15px;
    }

    .attributes-toggle {
      margin-top: 10px;
      padding: 6px;
      background: #f9f9f9;
      border-left: 4px solid #B22234;
      display: none;
    }

    footer {
      background-color: #f1f1f1;
      padding: 20px;
      text-align: center;
      color: #3C3B6E;
      border-top: 2px solid #B22234;
      font-size: 0.95em;
    }

    footer a {
      color: #3C3B6E;
      text-decoration: none;
      font-weight: bold;
    }

    footer a:hover {
      text-decoration: underline;
    }

    #readme {
      margin-top: 40px;
      padding-top: 10px;
      border-top: 2px solid #B22234;
    }

    #debugPanel {
      white-space: pre-wrap;
      background: #f5f5f5;
      border: 1px solid #ccc;
      padding: 10px;
      font-size: 0.9em;
      color: #333;
      margin-top: 30px;
    }

    table {
      border-collapse: collapse;
      margin-top: 10px;
    }

    table, th, td {
      border: 1px solid #ccc;
      padding: 6px 10px;
    }

    th {
      background-color: #eee;
    }
  </style>
</head>
<body>

<header>
  <h1>MyPubMed</h1>
  <p>NIH Research Simplified</p>
</header>

<main>
  <div class="controls">
    <input type="text" id="searchInput" placeholder="Search PubMed..." />
    <button id="searchButton">Search</button>
    <button onclick="showSavedArticles()">View Saved Articles</button>
    <button onclick="toggleReadme()">Show README</button>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="filterStrict"> Require All Metadata
    </label>

    <label style="margin-left: 15px;">
      <input type="checkbox" id="fallbackPlain"> Use Plain-Text Fallback
    </label>
  </div>

  <div id="results-count"></div>
  <div id="results">Ready.</div>
  <div id="debugPanel"><strong>Debug Log:</strong><br><pre>(standby... initializing)</pre></div>

  <div id="readme" style="display:none;">
    <h2>README: Attribute Reference Table</h2>
    <table>
      <thead>
        <tr>
          <th>Attribute Name</th><th>Type</th><th>Optional</th><th>Notes</th>
        </tr>
      </thead>
      <tbody>
        <tr><td>pmid</td><td>String</td><td>No</td><td>PubMed ID</td></tr>
        <tr><td>title</td><td>String</td><td>No</td><td>Article Title</td></tr>
        <tr><td>abstract</td><td>String</td><td>Yes</td><td>Abstract content</td></tr>
        <tr><td>affiliations</td><td>String</td><td>Yes</td><td>Author affiliations</td></tr>
        <tr><td>authors</td><td>String</td><td>No</td><td>Author list</td></tr>
        <tr><td>conflictOfInterest</td><td>String</td><td>Yes</td><td>COI disclosures</td></tr>
        <tr><td>dateSaved</td><td>Date</td><td>Yes</td><td>Save timestamp</td></tr>
        <tr><td>doi</td><td>String</td><td>Yes</td><td>Digital Object ID</td></tr>
        <tr><td>fullTextAvailable</td><td>Boolean</td><td>Yes</td><td>PMC open access?</td></tr>
        <tr><td>funding</td><td>String</td><td>Yes</td><td>Funding sources</td></tr>
        <tr><td>issue</td><td>String</td><td>Yes</td><td>Issue number</td></tr>
        <tr><td>journal</td><td>String</td><td>No</td><td>Journal name</td></tr>
        <tr><td>keywords</td><td>String</td><td>Yes</td><td>Publisher keywords</td></tr>
        <tr><td>meSHterms</td><td>String</td><td>Yes</td><td>Medical subject headings</td></tr>
        <tr><td>pages</td><td>String</td><td>Yes</td><td>Page range</td></tr>
        <tr><td>pmcid</td><td>String</td><td>Yes</td><td>PubMed Central ID</td></tr>
        <tr><td>pubDate</td><td>Date</td><td>No</td><td>Publication date</td></tr>
        <tr><td>volume</td><td>String</td><td>Yes</td><td>Volume number</td></tr>
        <tr><td>webLink</td><td>String</td><td>Yes</td><td>PubMed URL</td></tr>
      </tbody>
    </table>
  </div>
</main>

<footer>
  &copy; 2025 MyPubMed <strong id="versionTag">v00.003.033-alpha</strong> — Powered by Cats | Created by Clean Kitty Development
</footer>

<script src="main.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("searchButton").addEventListener("click", () => searchPubMed());
    document.getElementById("searchInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") searchPubMed();
    });

    const filter = document.getElementById("filterStrict");
    const fallback = document.getElementById("fallbackPlain");

    filter.addEventListener("change", () => {
      if (filter.checked) fallback.checked = false;
    });

    fallback.addEventListener("change", () => {
      if (fallback.checked) filter.checked = false;
    });
  });
</script>
</body>
</html>




/**
 * main.js — Core Logic for MyPubMed
 *
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * Handles all PubMed API interactions, article parsing, metadata scoring,
 * localStorage caching, and UI interactivity. Includes support for
 * Cloudflare fallback proxy when direct fetch is blocked.
 *
 * Version: 00.003.033-alpha
 *
 * Change Log:
 *  - Fixed Search button and Return key input trigger
 *  - Restored Show README toggle
 *  - Added basic fallback UI toggle for article attributes
 */

document.addEventListener("DOMContentLoaded", () => {
  const input = document.getElementById("searchInput");
  input.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      searchPubMed();
    }
  });
});

function toggleReadme() {
  const readme = document.getElementById("readme");
  readme.style.display = readme.style.display === "none" ? "block" : "none";
}

function searchPubMed() {
  const query = document.getElementById("searchInput").value.trim();
  const filterStrict = document.getElementById("filterStrict").checked;
  const fallbackPlain = document.getElementById("fallbackPlain").checked;
  const debugPanel = document.getElementById("debugPanel").querySelector("pre");

  if (!query) {
    alert("Please enter a search term.");
    return;
  }

  document.getElementById("results").innerHTML = "Searching...";
  debugPanel.textContent = `(standby... initializing)\n> Searching PubMed for: ${query}`;

  const useFallback = fallbackPlain;
  const useStrict = filterStrict;

  fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmode=json&term=${encodeURIComponent(query)}`)
    .then((response) => response.json())
    .then((data) => {
      const ids = data.esearchresult.idlist;
      debugPanel.textContent += `\n> Found ${ids.length} IDs`;

      const fetches = ids.map((id) => {
        const url = useFallback
          ? `https://mypubmed.cloudflare.workers.dev/${id}`
          : `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${id}&retmode=xml`;

        const mode = useFallback ? "fallback" : "xml";
        debugPanel.textContent += `\n> Fetching: ${id} (${mode})`;

        return fetch(url)
          .then((res) => res.text())
          .then((text) => parseArticleData(text, id, useFallback))
          .catch((err) => {
            debugPanel.textContent += `\n> Error fetching ${id}: Load failed`;
            return null;
          });
      });

      Promise.all(fetches).then((articles) => {
        const filtered = useStrict
          ? articles.filter((a) => a && a.metadataScore >= 5)
          : articles.filter((a) => a);

        renderResults(filtered);
        document.getElementById("results-count").textContent = `Articles Found: ${filtered.length}`;
      });
    })
    .catch((err) => {
      debugPanel.textContent += `\n> Search failed: ${err}`;
      document.getElementById("results").textContent = "Search failed.";
    });
}

function parseArticleData(text, pmid, isFallback) {
  let title = "", abstract = "", authors = "", pubDate = "", journal = "", doi = "", metadataScore = 0;

  if (isFallback) {
    title = "Fetched via fallback";
    abstract = text;
    metadataScore = 2;
  } else {
    const parser = new DOMParser();
    const xml = parser.parseFromString(text, "text/xml");

    const getVal = (tag) => {
      const el = xml.querySelector(tag);
      return el ? el.textContent.trim() : "";
    };

    title = getVal("ArticleTitle");
    abstract = getVal("Abstract AbstractText");
    journal = getVal("Journal Title");
    pubDate = getVal("PubDate Year") || getVal("PubDate MedlineDate");
    doi = getVal("ArticleId[IdType=doi]");

    const authorNodes = Array.from(xml.querySelectorAll("AuthorList Author"));
    authors = authorNodes
      .map((author) => {
        const last = author.querySelector("LastName")?.textContent || "";
        const fore = author.querySelector("ForeName")?.textContent || "";
        return `${fore} ${last}`.trim();
      })
      .join(", ");

    metadataScore += title ? 1 : 0;
    metadataScore += abstract ? 1 : 0;
    metadataScore += authors ? 1 : 0;
    metadataScore += journal ? 1 : 0;
    metadataScore += pubDate ? 1 : 0;
  }

  return {
    pmid,
    title,
    abstract,
    authors,
    journal,
    pubDate,
    doi,
    metadataScore,
  };
}

function renderResults(articles) {
  const resultsDiv = document.getElementById("results");
  resultsDiv.innerHTML = "";

  articles.forEach((article) => {
    const div = document.createElement("div");
    div.className = "result";

    div.innerHTML = `
      <div><span class="label">Title:</span> ${article.title}</div>
      <div><span class="label">Authors:</span> ${article.authors}</div>
      <div><span class="label">PMID:</span> ${article.pmid}</div>
      <div><span class="label">DOI:</span> ${article.doi || "N/A"}</div>
      <div><span class="label">Abstract:</span><br>${article.abstract || "(No abstract provided)"}</div>
      <div><span class="label">Journal:</span> ${article.journal}</div>
      <div><span class="label">Publication Date:</span> ${article.pubDate}</div>
      <div><span class="label">Metadata Score:</span> ${article.metadataScore}/5</div>
      <div><a href="https://pubmed.ncbi.nlm.nih.gov/${article.pmid}" target="_blank">View on PubMed</a></div>
      <button class="save-button" onclick="saveArticle(${article.pmid})">Save Article</button>
      <button class="save-button" onclick="toggleAttributes(this)">Show Attributes</button>
      <div class="attributes-toggle">
        <pre>${JSON.stringify(article, null, 2)}</pre>
      </div>
    `;

    resultsDiv.appendChild(div);
  });
}

function toggleAttributes(button) {
  const panel = button.nextElementSibling;
  panel.style.display = panel.style.display === "none" ? "block" : "none";
}

function saveArticle(pmid) {
  const results = JSON.parse(localStorage.getItem("savedArticles") || "[]");
  if (!results.includes(pmid)) {
    results.push(pmid);
    localStorage.setItem("savedArticles", JSON.stringify(results));
    alert(`Article ${pmid} saved.`);
  }
}

function showSavedArticles() {
  const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
  if (saved.length === 0) {
    document.getElementById("results").innerHTML = "No saved articles.";
    return;
  }

  document.getElementById("results").innerHTML = "Fetching saved articles...";

  const fetches = saved.map((pmid) =>
    fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`)
      .then((res) => res.text())
      .then((text) => parseArticleData(text, pmid, false))
      .catch(() => null)
  );

  Promise.all(fetches).then((articles) => {
    renderResults(articles.filter((a) => a));
  });
}




/**
 * fallback-worker.js - For MyPubMed
 *
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * This Cloudflare Worker acts as a proxy fallback to bypass browser CORS
 * restrictions when accessing raw PubMed metadata using the /?format=pubmed endpoint.
 *
 * Version: 00.003.033-alpha
 *
 * Change Log:
 *  - Cleaned up response formatting
 *  - Improved error response handling with consistent headers
 */

export default {
  async fetch(request, env, ctx) {
    try {
      const url = new URL(request.url);
      const parts = url.pathname.split("/");
      const pmid = parts[parts.length - 1];

      if (!pmid || isNaN(pmid)) {
        return new Response("Invalid PMID.", {
          status: 400,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Content-Type": "text/plain"
          }
        });
      }

      const targetUrl = `https://pubmed.ncbi.nlm.nih.gov/${pmid}/?format=pubmed`;
      const pubmedResponse = await fetch(targetUrl);

      if (!pubmedResponse.ok) {
        return new Response(`Failed to fetch data for PMID ${pmid}`, {
          status: 502,
          headers: {
            "Access-Control-Allow-Origin": "*",
            "Content-Type": "text/plain"
          }
        });
      }

      const body = await pubmedResponse.text();

      return new Response(body, {
        status: 200,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain"
        }
      });
    } catch (err) {
      return new Response(`Error: ${err.message}`, {
        status: 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Content-Type": "text/plain"
        }
      });
    }
  }
};