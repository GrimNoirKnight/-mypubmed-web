<!--
  MyPubMed: index.html - Version: v00.003.034-alpha
  ------------------------------------------------------------------------------
  Author: Alan D. Keizer
  © 2025 Alan D. Keizer. All rights reserved.

  Description:
  Frontend interface for MyPubMed — a browser-based PubMed explorer that fetches
  and displays article data via the NCBI E-Utilities API. Supports both XML and
  plain-text fallback metadata parsing, client-side filtering, localStorage
  caching, and developer debugging tools.

  Key Features:
  - Search PubMed by keyword
  - Render article metadata with toggleable attribute views
  - Save and view favorite articles locally
  - Toggle between strict filtering or plain-text fallback
  - Integrated README and debug panel
  - Clean, mobile-friendly layout styled in U.S. Flag palette

  Change Log:
  - Debug log and README repositioned into left column beside results
  - README restyled to 9pt Arial and lighter weight
  - Search button changes to US Flag Blue when searching
  - Cursor changes to wait indicator during search
  - Fixed layout spacing and paragraph padding for result sections
  - Added clickable DOI and Journal links when available
  - Search input field now has a clear “X” button
  - Mouse interactions improved for a smoother UI
-->


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>MyPubMed</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #FFFFFF;
      color: #3C3B6E;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #3C3B6E;
      color: #FFFFFF;
      padding: 30px 20px;
      text-align: center;
    }

    header h1 {
      margin: 0;
      font-size: 2em;
    }

    header p {
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 8px;
    }

    main {
      padding: 30px 20px;
      max-width: 1200px;
      margin: auto;
      display: flex;
      gap: 30px;
    }

    .left-panel {
      flex: 1;
      min-width: 320px;
    }

    .right-panel {
      flex: 2;
    }

    input[type="text"] {
      padding: 10px;
      font-size: 16px;
      width: 100%;
      border: 2px solid #B22234;
      color: #3C3B6E;
    }

    button {
      padding: 10px 16px;
      font-size: 16px;
      background-color: #B22234;
      color: white;
      border: none;
      cursor: pointer;
      margin: 5px 5px 10px 0;
    }

    button:hover {
      background-color: #8b1a25;
    }

    .save-button {
      background-color: transparent;
      border: 2px solid #B22234;
      color: #B22234;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 14px;
      margin-left: 5px;
    }

    .save-button:hover {
      background-color: #B22234;
      color: white;
    }

    .result {
      margin-bottom: 30px;
      border-bottom: 1px solid #ccc;
      padding-bottom: 20px;
    }

    .label {
      font-weight: bold;
      display: block;
      margin-top: 8px;
    }

    a {
      color: #B22234;
      text-decoration: underline;
    }

    #results-count {
      font-weight: bold;
      margin-bottom: 15px;
    }

    .attributes-toggle {
      margin-top: 10px;
      padding: 6px;
      background: #f9f9f9;
      border-left: 4px solid #B22234;
      display: none;
    }

    footer {
      background-color: #f1f1f1;
      padding: 20px;
      text-align: center;
      color: #3C3B6E;
      border-top: 2px solid #B22234;
      font-size: 0.95em;
    }

    footer a {
      color: #3C3B6E;
      text-decoration: none;
      font-weight: bold;
    }

    footer a:hover {
      text-decoration: underline;
    }

    #readme {
      margin-top: 20px;
      font-size: 9pt;
      display: none;
    }

    #debugPanel {
      white-space: pre-wrap;
      background: #f5f5f5;
      border: 1px solid #ccc;
      padding: 10px;
      font-size: 0.9em;
      color: #333;
      margin-top: 20px;
    }

    table {
      border-collapse: collapse;
      margin-top: 10px;
      font-size: 9pt;
    }

    table, th, td {
      border: 1px solid #ccc;
      padding: 4px 6px;
    }

    th {
      background-color: #eee;
    }
  </style>
</head>
<body>

<header>
  <h1>MyPubMed</h1>
  <p>NIH Research Simplified</p>
</header>

<main>
  <!-- LEFT COLUMN: README & DEBUG -->
  <div class="left-panel">
    <button onclick="toggleReadme()">Show README</button>
    <div id="readme">
      <h3>README: Attribute Reference Table</h3>
      <table>
        <thead>
          <tr>
            <th>Attribute Name</th><th>Type</th><th>Optional</th><th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr><td>pmid</td><td>String</td><td>No</td><td>PubMed ID</td></tr>
          <tr><td>title</td><td>String</td><td>No</td><td>Article Title</td></tr>
          <tr><td>abstract</td><td>String</td><td>Yes</td><td>Abstract content</td></tr>
          <tr><td>affiliations</td><td>String</td><td>Yes</td><td>Author affiliations</td></tr>
          <tr><td>authors</td><td>String</td><td>No</td><td>Author list</td></tr>
          <tr><td>conflictOfInterest</td><td>String</td><td>Yes</td><td>COI disclosures</td></tr>
          <tr><td>dateSaved</td><td>Date</td><td>Yes</td><td>Save timestamp</td></tr>
          <tr><td>doi</td><td>String</td><td>Yes</td><td>Digital Object ID</td></tr>
          <tr><td>pmcid</td><td>String</td><td>Yes</td><td>PubMed Central ID</td></tr>
          <tr><td>journal</td><td>String</td><td>No</td><td>Journal name</td></tr>
          <tr><td>volume</td><td>String</td><td>Yes</td><td>Volume number</td></tr>
          <tr><td>issue</td><td>String</td><td>Yes</td><td>Issue number</td></tr>
          <tr><td>pages</td><td>String</td><td>Yes</td><td>Page range</td></tr>
          <tr><td>webLink</td><td>String</td><td>Yes</td><td>PubMed URL</td></tr>
        </tbody>
      </table>
    </div>

    <div id="debugPanel">
      <strong>Debug Log:</strong>
      <pre>(standby... initializing)</pre>
    </div>
  </div>

  <!-- RIGHT COLUMN: SEARCH + RESULTS -->
  <div class="right-panel">
    <div class="controls">
      <input type="text" id="searchInput" placeholder="Search PubMed..." />
      <button id="searchButton">Search</button>
      <button onclick="showSavedArticles()">View Saved Articles</button>

      <label style="margin-left: 15px;">
        <input type="checkbox" id="filterStrict"> Require All Metadata
      </label>

      <label style="margin-left: 15px;">
        <input type="checkbox" id="fallbackPlain"> Use Plain-Text Fallback
      </label>
    </div>

    <div id="results-count"></div>
    <div id="results">Ready.</div>
  </div>
</main>

<footer>
  &copy; 2025 MyPubMed <strong id="versionTag">v00.003.034-alpha</strong> — Powered by Cats | Created by Clean Kitty Development
</footer>

<!-- Global logic scripts -->
<script src="main.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("searchButton").addEventListener("click", () => searchPubMed());
    document.getElementById("searchInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") searchPubMed();
    });

    const filter = document.getElementById("filterStrict");
    const fallback = document.getElementById("fallbackPlain");

    filter.addEventListener("change", () => {
      if (filter.checked) fallback.checked = false;
    });

    fallback.addEventListener("change", () => {
      if (fallback.checked) filter.checked = false;
    });
  });
</script>
</body>
</html>



/**
 * MyPubMed: main.js — Version: Version: v00.003.034-alpha

 ------------------------------------------------------------------------------
* Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * Handles PubMed API interactions, metadata parsing, local caching, UI updates,
 * and debug output. Includes XML parsing and fallback proxy handling.

 * Change Log:
 * - Improved article rendering layout and spacing
 * - Debug log content now updates with cleaner formatting
 * - Search button changes color to indicate active searching
 * - Cursor changes to "wait" while search is active
 * - Input field Enter key press now more robust
 * - DOI and Journal fields now become clickable links
 * - README toggle restored with improved behavior
 * - Improved error handling and logging in search flow
 * - Added initial scaffolding for future metadata extensions
 */



document.addEventListener("DOMContentLoaded", () => {
  const input = document.getElementById("searchInput");

  // Bind Enter key to trigger search
  input.addEventListener("keypress", (e) => {
    if (e.key === "Enter") searchPubMed();
  });
});

/** Toggle visibility of README table */
function toggleReadme() {
  const readme = document.getElementById("readme");
  readme.style.display = readme.style.display === "none" ? "block" : "none";
}

/** Main search function using E-Utilities */
function searchPubMed() {
  const query = document.getElementById("searchInput").value.trim();
  const filterStrict = document.getElementById("filterStrict").checked;
  const fallbackPlain = document.getElementById("fallbackPlain").checked;
  const debugPanel = document.getElementById("debugPanel").querySelector("pre");
  const searchBtn = document.getElementById("searchButton");

  if (!query) {
    alert("Please enter a search term.");
    return;
  }

  document.body.style.cursor = "wait";
  searchBtn.style.backgroundColor = "#3C3B6E";
  document.getElementById("results").innerHTML = "Searching...";
  debugPanel.textContent = `(standby... initializing)\n> Searching PubMed for: ${query}`;

  const useFallback = fallbackPlain;
  const useStrict = filterStrict;

  fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&retmode=json&term=${encodeURIComponent(query)}`)
    .then((response) => response.json())
    .then((data) => {
      const ids = data.esearchresult.idlist;
      debugPanel.textContent += `\n> Found ${ids.length} IDs`;

      const fetches = ids.map((id) => {
        const url = useFallback
          ? `https://mypubmed.cloudflare.workers.dev/${id}`
          : `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${id}&retmode=xml`;

        debugPanel.textContent += `\n> Fetching: ${id} (${useFallback ? "fallback" : "xml"})`;

        return fetch(url)
          .then((res) => res.text())
          .then((text) => parseArticleData(text, id, useFallback))
          .catch(() => {
            debugPanel.textContent += `\n> Error fetching ${id}: Load failed`;
            return null;
          });
      });

      Promise.all(fetches).then((articles) => {
        const filtered = useStrict
          ? articles.filter((a) => a && a.metadataScore >= 5)
          : articles.filter(Boolean);

        renderResults(filtered);
        document.getElementById("results-count").textContent = `Articles Found: ${filtered.length}`;
        searchBtn.style.backgroundColor = "#B22234";
        document.body.style.cursor = "default";
      });
    })
    .catch((err) => {
      debugPanel.textContent += `\n> Search failed: ${err}`;
      document.getElementById("results").textContent = "Search failed.";
      searchBtn.style.backgroundColor = "#B22234";
      document.body.style.cursor = "default";
    });
}

/** Extract relevant metadata from XML or plain text response */
function parseArticleData(text, pmid, isFallback) {
  let title = "", abstract = "", authors = "", pubDate = "", journal = "", doi = "", metadataScore = 0;
  let fullTextUrl = "", pmcid = "";

  if (isFallback) {
    return null; // skip fallback in this version until worker is stable
  }

  const parser = new DOMParser();
  const xml = parser.parseFromString(text, "text/xml");

  const getVal = (tag) => {
    const el = xml.querySelector(tag);
    return el ? el.textContent.trim() : "";
  };

  title = getVal("ArticleTitle");
  abstract = getVal("Abstract AbstractText");
  journal = getVal("Journal Title");
  pubDate = getVal("PubDate Year") || getVal("PubDate MedlineDate");
  doi = getVal("ArticleId[IdType=doi]");
  pmcid = getVal("ArticleId[IdType=pmc]");
  authors = Array.from(xml.querySelectorAll("AuthorList Author"))
    .map((author) => {
      const last = author.querySelector("LastName")?.textContent || "";
      const fore = author.querySelector("ForeName")?.textContent || "";
      return `${fore} ${last}`.trim();
    })
    .join(", ");

  metadataScore += title ? 1 : 0;
  metadataScore += abstract ? 1 : 0;
  metadataScore += authors ? 1 : 0;
  metadataScore += journal ? 1 : 0;
  metadataScore += pubDate ? 1 : 0;

  return {
    pmid,
    title,
    abstract,
    authors,
    journal,
    pubDate,
    doi,
    pmcid,
    metadataScore,
  };
}

/** Render article list to DOM */
function renderResults(articles) {
  const resultsDiv = document.getElementById("results");
  resultsDiv.innerHTML = "";

  articles.forEach((article) => {
    const div = document.createElement("div");
    div.className = "result";

    const doiLink = article.doi ? `<a href="https://doi.org/${article.doi}" target="_blank">${article.doi}</a>` : "N/A";

    div.innerHTML = `
      <div class="label">Title:</div> ${article.title}
      <div class="label">Authors:</div> ${article.authors}
      <div class="label">PMID:</div> ${article.pmid}
      <div class="label">DOI:</div> ${doiLink}
      <div class="label">Abstract:</div><div>${article.abstract || "(No abstract provided)"}</div>
      <div class="label">Journal:</div> ${article.journal}
      <div class="label">Publication Date:</div> ${article.pubDate}
      <div class="label">Metadata Score:</div> ${article.metadataScore}/5
      <div><a href="https://pubmed.ncbi.nlm.nih.gov/${article.pmid}" target="_blank">View on PubMed</a></div>
      <button class="save-button" onclick="saveArticle('${article.pmid}')">Save Article</button>
      <button class="save-button" onclick="toggleAttributes(this)">Show Attributes</button>
      <div class="attributes-toggle"><pre>${JSON.stringify(article, null, 2)}</pre></div>
    `;

    resultsDiv.appendChild(div);
  });
}

/** Expand/collapse the JSON block */
function toggleAttributes(button) {
  const panel = button.nextElementSibling;
  const visible = panel.style.display === "block";
  panel.style.display = visible ? "none" : "block";
  button.textContent = visible ? "Show Attributes" : "Hide Attributes";
  button.style.backgroundColor = visible ? "transparent" : "#3C3B6E";
  button.style.color = visible ? "#B22234" : "#fff";
}

/** Save article PMID to localStorage */
function saveArticle(pmid) {
  const results = JSON.parse(localStorage.getItem("savedArticles") || "[]");
  if (!results.includes(pmid)) {
    results.push(pmid);
    localStorage.setItem("savedArticles", JSON.stringify(results));
    alert(`Article ${pmid} saved.`);
  } else {
    alert(`Article ${pmid} is already saved.`);
  }
}

/** Load and display saved articles from localStorage */
function showSavedArticles() {
  const saved = JSON.parse(localStorage.getItem("savedArticles") || "[]");
  if (saved.length === 0) {
    document.getElementById("results").innerHTML = "No saved articles.";
    return;
  }

  document.getElementById("results").innerHTML = "Fetching saved articles...";

  const fetches = saved.map((pmid) =>
    fetch(`https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${pmid}&retmode=xml`)
      .then((res) => res.text())
      .then((text) => parseArticleData(text, pmid, false))
      .catch(() => null)
  );

  Promise.all(fetches).then((articles) => {
    renderResults(articles.filter(Boolean));
  });
}



/**
 * MyPubMed: fallback-worker.js - Version: v00.003.034-alpha
 ------------------------------------------------------------------------------
 * Author: Alan D. Keizer
 * © 2025 Alan D. Keizer. All rights reserved.
 *
 * Description:
 * Acts as a proxy fallback for MyPubMed, bypassing browser CORS restrictions
 * and fetching raw PubMed metadata via the NCBI website using the `?format=pubmed` endpoint.
 * Returns plain-text metadata when XML fetch fails.
 *
 * Change Log:
 * - Improved consistency of HTTP headers (CORS + Content-Type)
 * - Standardized error response structure
 * - Cleaned up fetch error handling for better logging
 * - Prep for future DOI or LID/PII link generation logic
 */


export default {
  async fetch(request) {
    try {
      const url = new URL(request.url);
      const pathParts = url.pathname.split("/");

      const pmid = pathParts[pathParts.length - 1];

      if (!pmid || isNaN(pmid)) {
        return new Response("Invalid PMID.", {
          status: 400,
          headers: standardHeaders("text/plain"),
        });
      }

      const targetUrl = `https://pubmed.ncbi.nlm.nih.gov/${pmid}/?format=pubmed`;

      const pubmedRes = await fetch(targetUrl);

      if (!pubmedRes.ok) {
        return new Response(`Failed to fetch data for PMID ${pmid}`, {
          status: 502,
          headers: standardHeaders("text/plain"),
        });
      }

      const body = await pubmedRes.text();

      return new Response(body, {
        status: 200,
        headers: standardHeaders("text/plain"),
      });

    } catch (err) {
      return new Response(`Worker Error: ${err.message}`, {
        status: 500,
        headers: standardHeaders("text/plain"),
      });
    }
  }
};

/** Common response headers */
function standardHeaders(contentType) {
  return {
    "Access-Control-Allow-Origin": "*",
    "Content-Type": contentType,
    "Cache-Control": "no-store",
  };
}